name: Deploy Frontend

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  WORKING_DIRECTORY: "./frontend"
  PUBLIC_URL: ${{ secrets.PUBLIC_URL }}
  REACT_APP_API_URL: ${{ secrets.API_URL }}
  REACT_APP_STATIC_URL: ${{ secrets.STATIC_URL }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      deployments: write

    steps:
      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Cancel In-Progress Deployments
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for in-progress deployments..."
          deployments=$(gh api \
            repos/insitech-international/code-clarity/deployments \
            --jq '.[] | select(.environment == "github-pages" and .state == "in_progress") | .id' \
            2>/dev/null || echo "")

          if [ -z "$deployments" ]; then
            echo "No in-progress deployments found"
            exit 0
          fi

          for deployment in $deployments; do
            echo "Canceling deployment $deployment..."
            gh api \
              -X POST \
              repos/insitech-international/code-clarity/deployments/$deployment/statuses \
              -f state="inactive" \
              --silent || echo "Failed to cancel deployment $deployment"
          done

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Setup environment
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          cat > .env << EOF
          REACT_APP_API_URL=${{ env.REACT_APP_API_URL }}
          REACT_APP_STATIC_URL=${{ env.REACT_APP_STATIC_URL }}
          PUBLIC_URL=${{ env.PUBLIC_URL }}
          NODE_ENV=production
          EOF

          cat .env

      - name: Create and populate data directories
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          mkdir -p public/static/data/{questions,solutions}

          echo "Copying question bank..."
          if ! cp -r ../backend/code_clarity_fastapi/data/question_bank/* public/static/data/questions/; then
            echo "Error copying question bank"
            exit 1
          fi

          echo "Copying solution bank..."
          if ! cp -r ../backend/code_clarity_fastapi/data/solution_bank/* public/static/data/solutions/; then
            echo "Error copying solution bank"
            exit 1
          fi

          find public/static/data/questions -type d | while read dir; do
            (cd "$dir" && ls -1 > directory_listing.txt)
          done

          find public/static/data/solutions -type d | while read dir; do
            (cd "$dir" && ls -1 > directory_listing.txt)
          done

          echo "Verifying directory structure..."
          find public/static/data -type d
          echo "Verifying file counts..."
          echo "Questions: $(find public/static/data/questions -type f -name "*.md" | wc -l)"
          echo "Solutions: $(find public/static/data/solutions -type f -name "*.md" | wc -l)"

      - name: Generate index files
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Create scripts directory if it doesn't exist
          mkdir -p scripts

          # Create the Node.js script file
          cat > scripts/generateIndex.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          function walkDir(dir) {
            let results = [];
            const list = fs.readdirSync(dir);

            list.forEach((file) => {
              const filePath = path.join(dir, file);
              const stat = fs.statSync(filePath);

              if (stat && stat.isDirectory()) {
                results = results.concat(walkDir(filePath));
              } else if (path.extname(file) === '.md') {
                // Extract question ID from filename (assumes format: 111_Something.md)
                const id = file.split('_')[0];
                results.push({
                  id: parseInt(id),
                  // Ensure path is relative to 'static/data' for deployment
                  path: filePath.replace(/^.*\/public\/static\/data\//, 'static/data/')
                });
              }
            });

            return results;
          }

          function generateIndex() {
            const questionsDir = path.join(process.cwd(), 'public/static/data/questions');
            const solutionsDir = path.join(process.cwd(), 'public/static/data/solutions');

            const index = {
              questions: walkDir(questionsDir),
              solutions: walkDir(solutionsDir)
            };

            // Write index file
            fs.writeFileSync(
              path.join(process.cwd(), 'public/static/data/index.json'),
              JSON.stringify(index, null, 2)
            );
          }

          generateIndex();
          EOF

          # Execute the script
          node scripts/generateIndex.js

          # Verify the generated files
          echo "Checking generated files..."
          ls -l public/static/data/index.json


      - name: Extract Categories and Subcategories
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          DEV_API_URL: ${{ secrets.API_URL }}
        run: |
          # Ensure the directory exists
          mkdir -p public/static/data

          # Python script to extract categories
          python3 - << EOF
          import json
          import requests
          import os

          # Fetch questions from the API
          api_url = os.environ.get('DEV_API_URL', 'http://127.0.0.1:8000/questions/')
          response = requests.get(api_url)
          questions = response.json()

          # Extract unique categories and subcategories
          categories = {}
          for question in questions:
              category = question.get('category', '')
              subcategory = question.get('subcategory', '')
              
              if category:
                  if category not in categories:
                      categories[category] = set()
                  
                  if subcategory:
                      categories[category].add(subcategory)

          # Convert sets to lists for JSON serialization
          categories_dict = {
              cat: sorted(list(subcat)) for cat, subcat in categories.items()
          }

          # Write categories to JSON file
          with open('public/static/data/categories.json', 'w') as f:
              json.dump(categories_dict, f, indent=2)

          print("Categories extracted and saved to public/static/data/categories.json")
          print("Categories found:", list(categories_dict.keys()))
          EOF

          # Verify the file was created
          ls -l public/static/data/categories.json
          cat public/static/data/categories.json


      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          rm -rf node_modules package-lock.json

          npm install --no-package-lock
          npm install --save \
            react-icons@4.12.0 \
            gh-pages@6.1.1 \
            axios@1.6.7 \
            fs-extra@11.2.0
          npm install --save-dev @babel/plugin-proposal-private-property-in-object@7.21.11

          npm list --depth=0

      - name: Setup environment
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          cat > .env << EOF
          REACT_APP_BASE_URL=${{ env.PUBLIC_URL }}
          PUBLIC_URL=${{ env.PUBLIC_URL }}
          EOF

          cat .env

      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          CI: false
        run: |
          npm run build

          if [ ! -d "build" ]; then
            echo "Build directory not created!"
            exit 1
          fi
          echo "Build size: $(du -sh build)"

      - name: Prepare deployment artifacts
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          cd build
          echo "${{ env.PUBLIC_URL }}" | sed 's/https:\/\///' > CNAME
          touch .nojekyll
          cp index.html 404.html

          ls -la
          cat CNAME

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./frontend/build
          force_orphan: true
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: "Deploy to GitHub Pages [skip ci]"
          full_commit_message: |
            Deploy to GitHub Pages

            Deployed from commit: ${{ github.sha }}
            Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true

      - name: Verify deployment branch
        run: |
          MAX_ATTEMPTS=10
          ATTEMPT=1

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Checking gh-pages branch (attempt $ATTEMPT/$MAX_ATTEMPTS)..."
            if git ls-remote --heads origin gh-pages > /dev/null; then
              echo "âœ“ gh-pages branch exists and is ready"
              exit 0
            fi
            ATTEMPT=$((ATTEMPT + 1))
            sleep 10
          done

          echo "Error: gh-pages branch was not created after $MAX_ATTEMPTS attempts"
          exit 1
