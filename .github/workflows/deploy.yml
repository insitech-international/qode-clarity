name: Deploy Frontend & Backend to Cloud Run with Firestore

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"
  WORKING_DIRECTORY: "./frontend"
  BACKEND_DIRECTORY: "./backend"
  PUBLIC_URL: ${{ secrets.PUBLIC_URL }}
  REACT_APP_API_URL: ${{ secrets.API_URL }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: "us-central1"
  GCP_APP_NAME: "qode-clarity-api"
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  ARTIFACT_REGISTRY_REPO: "qode-clarity-repo"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      deployments: write

    steps:
      # GitHub CLI and Deployment Management
      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Cancel In-Progress Deployments
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for in-progress deployments..."
          deployments=$(gh api \
            repos/${{ github.repository }}/deployments \
            --jq '.[] | select(.environment == "github-pages" and .state == "in_progress") | .id' \
            2>/dev/null || echo "")

          if [ -z "$deployments" ]; then
            echo "No in-progress deployments found"
            exit 0
          fi

          for deployment in $deployments; do
            echo "Canceling deployment $deployment..."
            gh api \
              -X POST \
              repos/${{ github.repository }}/deployments/$deployment/statuses \
              -f state="inactive" \
              --silent || echo "Failed to cancel deployment $deployment"
          done

      # Repository Checkout
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Setup GCP CLI
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Enable required APIs if not already enabled
      - name: Enable GCP APIs
        run: |
          gcloud services enable run.googleapis.com
          gcloud services enable artifactregistry.googleapis.com
          gcloud services enable cloudbuild.googleapis.com
          gcloud services enable firestore.googleapis.com

      # Setup Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Setup Firebase Tools
      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      # Setup Python for Backend
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      # Configure GCP Service Account
      - name: Configure GCP Service Account
        working-directory: ${{ env.BACKEND_DIRECTORY }}
        run: |
          # Set up Firebase service account (with base64 decode)
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' | base64 --decode > firebase-key.json

          # Check if the Firebase key file is valid
          if [ -s firebase-key.json ]; then
            echo "Firebase key file created successfully"
            echo "File size: $(stat -c%s firebase-key.json) bytes"
            echo "Checking file content structure..."
            jq -r 'keys | join(", ")' firebase-key.json || echo "Error: Not valid JSON"
          else
            echo "Error: Firebase key file is empty"
            exit 1
          fi

          # Set up GCP service account for deployment (with base64 decode)
          echo '${{ secrets.GCP_SA_KEY }}' | base64 --decode > gcp-github-deployment.json

          # Check if the GCP key file is valid
          if [ -s gcp-github-deployment.json ]; then
            echo "GCP key file created successfully"
            echo "File size: $(stat -c%s gcp-github-deployment.json) bytes"
            echo "Checking file content structure..."
            jq -r 'keys | join(", ")' gcp-github-deployment.json || echo "Error: Not valid JSON"
          else
            echo "Error: GCP key file is empty"
            exit 1
          fi

          # Set environment variables
          echo "QODE_CLARITY_FIREBASE_CREDENTIALS_PATH=$(pwd)/firebase-key.json" >> $GITHUB_ENV
          echo "QODE_CLARITY_FIREBASE_PROJECT_ID=${{ env.FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-github-deployment.json" >> $GITHUB_ENV
          echo "QODE_CLARITY_GCP_GITHUB_CREDENTIALS_PATH=$(pwd)/gcp-github-deployment.json" >> $GITHUB_ENV
          echo "QODE_CLARITY_GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV

      # Use the included migrate_to_firestore.py script
      - name: Import Data to Firestore
        working-directory: ${{ env.BACKEND_DIRECTORY }}
        run: |
          # Install required dependencies
          pip install -r requirements.txt

          echo "Running data migration from file system to Firestore..."
          python qode_clarity_fastapi/app/migrate_data.py

      # Build and Deploy Backend to Cloud Run
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Create or ensure Artifact Registry repository exists
        run: |
          # Check if repository exists, create if not
          if ! gcloud artifacts repositories describe ${{ env.ARTIFACT_REGISTRY_REPO }} --location=${{ env.GCP_REGION }} &>/dev/null; then
            echo "Creating Artifact Registry repository..."
            gcloud artifacts repositories create ${{ env.ARTIFACT_REGISTRY_REPO }} \
              --repository-format=docker \
              --location=${{ env.GCP_REGION }} \
              --description="Docker repository for Qode Clarity"
          else
            echo "Artifact Registry repository already exists."
          fi

      - name: Build and Push Backend Docker Image
        working-directory: ${{ env.BACKEND_DIRECTORY }}
        run: |
          # Create Dockerfile if it doesn't exist
          if [ ! -f "Dockerfile" ]; then
            cat > Dockerfile << 'EOF'
          FROM python:3.9-slim

          WORKDIR /app

          # Copy requirements first for better caching
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt

          # Copy the rest of the application
          COPY . .

          # Set environment variables
          ENV PORT=8080
          ENV PYTHONUNBUFFERED=1
          ENV QODE_CLARITY_ENVIRONMENT=production

          # Command to run the application
          CMD exec gunicorn -w 4 -k uvicorn.workers.UvicornWorker qode_clarity_fastapi.app.main:app --bind :$PORT
          EOF
          fi

          # Build and push the Docker image
          IMAGE_URL="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.GCP_APP_NAME }}:${{ github.sha }}"

          echo "Building Docker image: $IMAGE_URL"
          docker build -t $IMAGE_URL .

          echo "Pushing Docker image to Artifact Registry..."
          docker push $IMAGE_URL

          echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_ENV

      - name: Deploy Backend to Cloud Run
        run: |
          echo "Deploying to Cloud Run: ${{ env.IMAGE_URL }}"

          gcloud run deploy ${{ env.GCP_APP_NAME }} \
            --image ${{ env.IMAGE_URL }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --set-env-vars="QODE_CLARITY_ENVIRONMENT=production" \
            --memory=512Mi \
            --cpu=1 \
            --port=8080 \
            --min-instances=0 \
            --max-instances=2

          # Get the deployed URL and set both Cloud Run URL and API URL in environment variables
          SERVICE_URL=$(gcloud run services describe ${{ env.GCP_APP_NAME }} --region ${{ env.GCP_REGION }} --format='value(status.url)')
          echo "CLOUD_RUN_URL=$SERVICE_URL" >> $GITHUB_ENV
          echo "API_URL=${{ secrets.API_URL }}" >> $GITHUB_ENV
          echo "Deployed to Cloud Run: $SERVICE_URL"
          echo "API Custom Domain: ${{ secrets.API_URL }}"

      # Setup Node.js for Frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      # Frontend Environment Preparation
      - name: Prepare Frontend Environment Files
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Create base .env file
          cat > .env << EOF
          REACT_APP_VERSION=${{ github.sha }}
          REACT_APP_NAME=Qode Clarity
          REACT_APP_DESCRIPTION=Interactive learning platform for coding questions and solutions
          EOF

          # Create production-specific environment file
          cat > .env.production << EOF
          REACT_APP_ENV=production
          REACT_APP_API_BASE_URL=${{ secrets.API_URL }}/api
          PUBLIC_URL=${{ env.PUBLIC_URL }}
          REACT_APP_DEBUG=false
          REACT_APP_LOG_LEVEL=error

          # Feature flags
          REACT_APP_ENABLE_ANALYTICS=true
          REACT_APP_ENABLE_AUTH=true
          REACT_APP_ENABLE_MOCK_API=false

          # Firebase Configuration
          REACT_APP_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID=${{ env.FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}
          REACT_APP_FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }}

          # Firebase Emulator Settings (disabled in production)
          REACT_APP_USE_FIREBASE_EMULATOR=false

          # Production-specific settings
          REACT_APP_POLL_INTERVAL=30000
          REACT_APP_CACHE_DURATION=300000
          EOF

          echo "Environment files created:"
          ls -la .env*
          echo "Contents of .env file:"
          cat .env
          echo "Contents of .env.production file (first few lines):"
          head -n 10 .env.production

      # Frontend Dependencies and Build
      - name: Install Frontend Dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          rm -rf node_modules package-lock.json

          npm install --no-package-lock
          npm install --save \
            react-icons@4.12.0 \
            gh-pages@6.1.1 \
            axios@1.6.7 \
            firebase@10.8.0
          npm install --save-dev @babel/plugin-proposal-private-property-in-object@7.21.11

          npm list --depth=0

      - name: Build Frontend Application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          CI: false
        run: |
          npm run build

          if [ ! -d "build" ]; then
            echo "Build directory not created!"
            exit 1
          fi
          echo "Build size: $(du -sh build)"

      # Deployment Preparation
      - name: Prepare Deployment Artifacts
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          cd build
          echo "${{ env.PUBLIC_URL }}" | sed 's/https:\/\///' > CNAME
          touch .nojekyll
          cp index.html 404.html

          ls -la
          cat CNAME

      # GitHub Pages Deployment
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./frontend/build
          force_orphan: true
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: "Deploy to GitHub Pages [skip ci]"
          full_commit_message: |
            Deploy to GitHub Pages

            Deployed from commit: ${{ github.sha }}
            Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      # GitHub Pages Configuration
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true

      # Create a release for tracking
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG="release-$(date +'%Y%m%d%H%M%S')"

          gh release create $RELEASE_TAG \
            --title "Deployment $RELEASE_TAG" \
            --notes "Deployed to GitHub Pages and Cloud Run on $(date +'%Y-%m-%d %H:%M:%S')\nBackend URL: ${{ secrets.API_URL }}"

      # Verify Deployments
      - name: Verify GitHub Pages Deployment
        run: |
          MAX_ATTEMPTS=10
          ATTEMPT=1

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Checking gh-pages branch (attempt $ATTEMPT/$MAX_ATTEMPTS)..."
            if git ls-remote --heads origin gh-pages > /dev/null; then
              echo "✓ gh-pages branch exists and is ready"
              break
            fi
            ATTEMPT=$((ATTEMPT + 1))
            sleep 10
          done

          if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
            echo "Error: gh-pages branch was not created after $MAX_ATTEMPTS attempts"
            exit 1
          fi

      - name: Verify Cloud Run Deployment
        run: |
          echo "Checking Cloud Run deployment status..."

          MAX_ATTEMPTS=10
          ATTEMPT=1

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Checking deployment status (attempt $ATTEMPT/$MAX_ATTEMPTS)..."
            
            STATUS=$(gcloud run services describe ${{ env.GCP_APP_NAME }} --region ${{ env.GCP_REGION }} --format="value(status.conditions[0].status)")
            
            if [[ "$STATUS" == "True" ]]; then
              echo "✓ Cloud Run deployment is serving traffic"
              echo "Service URL: ${{ env.API_URL }}"
              break
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            sleep 15
          done

          if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
            echo "Warning: Could not verify Cloud Run deployment status after $MAX_ATTEMPTS attempts"
            # Don't fail the workflow, as deployment might still be in progress
          fi

      # Clean up sensitive files
      - name: Clean up sensitive files
        if: always()
        run: |
          echo "Cleaning up sensitive files..."
          if [ -f "${{ env.BACKEND_DIRECTORY }}/firebase-key.json" ]; then
            rm -f "${{ env.BACKEND_DIRECTORY }}/firebase-key.json"
          fi
