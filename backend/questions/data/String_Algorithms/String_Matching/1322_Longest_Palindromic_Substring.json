{
    "id": 1322,
    "title": "Longest Palindromic Substring for Improving Data Compression", 
    "difficulty": "Medium",
    "category": "String Algorithms",
    "subcategory": "String Manipulation",
    "similar_question": {
        "platforms": [{"Leetcode": 5}, "PlatformB"], 
        "companies": ["Apple", "Google", "Bloomberg", "Oracle", "Goldman Sachs", "Uber", "Meta", "Walmart Labs"]
    },
    "real_life_domains": ["Data Compression", "Text Processing"], 
    "scenario": "In a cloud storage system, large amounts of text data need to be compressed efficiently to reduce storage costs. Since palindromes are symmetrical, identifying the longest palindromic substrings in text files can help optimize compression algorithms. By identifying and compressing recurring patterns like palindromes, the system can reduce the file size significantly without losing data integrity.",
    "task": "Given a string, write a function to find the longest palindromic substring. The function should return the substring with the maximum length that reads the same forward and backward.",
    "examples": [
        {
            "input": "str = \"babad\"",
            "output": "\"bab\" or \"aba\"",
            "explanation": "Both 'bab' and 'aba' are palindromes, and they are the longest palindromic substrings."
        },
        {
            "input": "str = \"cbbd\"",
            "output": "\"bb\"", 
            "explanation": "'bb' is the longest palindromic substring in this case."
        },
        {
            "input": "str = \"a\"",
            "output": "\"a\"", 
            "explanation": "The string contains only one character, so it's trivially a palindrome."
        }
    ],
    "constraints": [
        "1 <= str.length <= 10^4",
        "str consists of only lowercase English letters."
    ]
}
